# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a sample controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################

from gluon.storage import Storage
settings = Storage()
settings.visit=False
settings.accept=False

def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simple replace the two lines below with:
    return auth.wiki()
    """
    if auth.user==None:
        try:
            visited_time=db(db.init_visitor.id>0).select()[0].times
            if session.visit==False:
                db(db.init_visitor.id>0).update(times=visited_time+1)
                session.visit=True
        except:
            visited_time=1
            db.init_visitor.insert(times=1)
    else:
        visited_time=True
    return dict(visited_time=visited_time)

def services():
    response.flash = session.resflash or str(T(''))
    if auth.user==None:
        applyform=SQLFORM(db.init_visit_apply, fields=['name','mail','phone','building','room','description'])
        if applyform.accepts(request.post_vars,session):
            to=request.post_vars.mail
            subject=str(T('报修申请已接受'))
            message=request.post_vars.name+str(T('你好，你的报修申请已经提交，我们会尽快与你联系，尽力解决你的电脑或者网络故障。多谢你的信任！——<a href='+URL('init','default','index')+'>复旦大学北苑园委会网络中心</a>'))
            notice = Mail()
            notice.send(to,subject,message)
            session.accept=True
            session.resflash=T('Accepted Successfully!' )
            redirect(URL(r=request, f=''))
    else:
        applyform=SQLFORM(db.init_login_apply, fields=['description'])
        if applyform.accepts(request.post_vars,session):
            to=auth.user.email
            subject=str(T('报修申请已接受'))
            message=auth.user.first_name+str(T('你好，你的报修申请已经提交，我们会尽快与你联系，尽力解决你的电脑或者网络故障。多谢你的信任！——<a href='+URL('init','default','index')+'>复旦大学北苑园委会网络中心</a>'))
            notice = Mail()
            notice.send(to,subject,message)
            session.accept=True
            session.resflash=T('Accepted Successfully!' )
            redirect(URL(r=request, f=''))

	################## submit an apply ################################
    session.resflash=''

    return dict(applyform=applyform)


from gluon.tools import Crud
crud = Crud(db)

@auth.requires_login()
def selfapplies():
    query = (db.init_login_apply.applier_id==auth.user.id)
    fields = [db.init_login_apply.applier_id, db.auth_user.first_name,db.init_login_apply.description,db.init_login_apply.status,db.init_login_apply.apply_time,db.init_login_apply.fix_time]
    grid=SQLFORM.grid(query,fields,create=False,editable=False)
    return dict(grid=grid)

@auth.requires_membership('fixman')
def manage():
    query = (db.init_login_apply.applier_id>0)
    fields = [db.init_login_apply.applier_id, db.auth_user.first_name,db.init_login_apply.description,db.init_login_apply.status,db.init_login_apply.apply_time,db.init_login_apply.fix_time]
    grid=SQLFORM.grid(query,create=False)
    
    query2 = (db.init_visit_apply.id>0)
    fields = []
    visitgrid=SQLFORM.grid(query2,create=False)
    return dict(visitgrid=visitgrid)

def departments():
    return dict()

def activities():
    return dict()

def joinus():
    return dict()

def wiki():
    return auth.wiki(manage_permissions=True, force_prefix='%(first_name)s_%(last_name)s_')

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_users (requires membership in 
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())

@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())


class Mail(object):

    """
    Class for configuring and sending emails.
    Works with SMTP and Google App Engine

    Example:

    from contrib.utils import *
    mail=Mail()
    mail.settings.server=''
    mail.settings.sender=''
    mail.settings.login=None or ''
    mail.send(to=['piggy.www@gmail.com'],subject='None',message='None')

    In Google App Engine use mail.settings.server='gae'
    """

    def __init__(self):
        self.settings = Storage()
        self.settings.server = 'gae'
        self.settings.sender = 'piggy.www@gmail.com'
        self.settings.login =  'piggy.www@gmail.com:'
        self.settings.lock_keys = True

    def send(self, to, subject='None', message='None',):
        """
        Sends an email. Returns True on success, False on failure.
        """

        if not isinstance(to, list):
            to = [to]
        try:
            if self.settings.server == 'gae':
                from google.appengine.api import mail
                mail.send_mail(sender=self.settings.sender, to=to,
                               subject=subject, body=message)
            else:
                msg = '''From: %s\r
To: %s\r
Subject: %s\r
\r
%s'''\
                     % (self.settings.sender, ', '.join(to), subject,
                        message)
                (host, port) = self.settings.server.split(':')
                server = smtplib.SMTP(host, port)
                justfortest=1
                if self.settings.login:
                    server.ehlo()
                    server.starttls()
                    server.ehlo()
                    (username, password) = self.settings.login.split(':')
                    server.login(username, password)
                server.sendmail(self.settings.sender, to, msg)
                server.quit()
        except Exception, e:
            return False
        return True
 
 
if session.accept:
    session.newapply=True
    session.accept=False
